package com.meetup.activity;

import java.io.File;
import java.util.ArrayList;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.os.Bundle;
import android.view.Display;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

import com.meetup.ImageLoader;
import com.meetup.Meetup;
import com.meetup.R;
import com.meetup.activity.gallery.AssetImage;
import com.meetup.utils.Log;

public class PhotoGallery extends Activity {

	private static final Options sOptions = new Options();
	private ArrayList<Bitmap> mBitmaps = new ArrayList<Bitmap>();
	private GridView grid;
	private int width;
	private int height;
	private ImageLoader imageLoader;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
		try{
			setContentView(R.layout.activity_photo_gallery);

			Display disp = getWindowManager().getDefaultDisplay();
			width = disp.getWidth();
			height = disp.getHeight();

			sOptions.inInputShareable = true;
			sOptions.inPurgeable = true;
			// sOptions.inSampleSize = 2;
			
			imageLoader = new ImageLoader(this);

			grid = (GridView) findViewById(R.id.myGrid);
		} catch(NullPointerException e){
			Log.v("There was insufficient memory avaioble on startup.");
			onLowMemory();
		}

	}

	@Override
	protected void onResume() {
		super.onResume();
		for (Bitmap bitmap : mBitmaps) {
			bitmap.recycle();
		}
		mBitmaps.clear();
		loadBitmaps();
		grid.setAdapter(new ImageAdapter(this, width, height));
		grid.setOnItemClickListener(onItemClickListener);
	}

	@Override
	protected void onPause() {
		try {
		    GridView gridView = (GridView) findViewById(R.id.myGrid);
		    int count = gridView.getCount();
		    for (int i = 0; i < count; i++) {
		        ImageView v = (ImageView) gridView.getChildAt(i);
		        if (v != null) {
		            if (v.getDrawable() != null) v.getDrawable().setCallback(null);
		        }
		    }
		} catch(NullPointerException e){
			Log.v("Couldn't free mem");
		}	    
	    super.onPause();
	}

	@Override
	public void onLowMemory() {
		super.onLowMemory();
		Toast.makeText(PhotoGallery.this, getString(R.string.text_low_memory_warning), Toast.LENGTH_SHORT).show();
		AssetImage.ImageRecycler.recycleAll();
    	finish();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		for (Bitmap bitmap : mBitmaps) {
			bitmap.recycle();
		}
		mBitmaps.clear();
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
	}

	@Override
	protected void onNewIntent(Intent intent) {
		super.onNewIntent(intent);
		Log.v("This is the intent recieved: " + intent.toString());

	}

	private OnItemClickListener onItemClickListener = new OnItemClickListener() {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			Intent intent = new Intent(PhotoGallery.this, PhotoViewer.class);
			intent.putExtra("position", position);
			startActivity(intent);
		}
	};

    public Cursor query(Uri uri, String[] projection,
            String selection, String[] selectionArgs, String sortOrder) {
        try {
            ContentResolver resolver = getApplicationContext().getContentResolver();
            if (resolver == null) {
                return null;
            }
            return resolver.query(uri, projection, selection, selectionArgs, sortOrder);
         } catch (UnsupportedOperationException ex) {
            return null;
        }
        
    }

	private void loadBitmaps() {
		Log.v("Loading bitmap");
		Intent intent = getIntent();
		
		String remoteEventId = intent.getStringExtra(Meetup.Extra.REMOTE_EVENT_ID);
		Log.v("remote event id : " + intent.getStringExtra(Meetup.Extra.REMOTE_EVENT_ID));
		
		Cursor c = managedQuery(Meetup.CONTENT_URI_PHOTOS, null, Meetup.PHOTOS_COL.EVENT_ID + " = ?" , new String[]{remoteEventId}, null);
		while (c.moveToNext()) {
			String imageUrl = c.getString(c.getColumnIndex(Meetup.PHOTOS_COL.PHOTO_LINK));
			Log.v("image url : " + imageUrl);
			mBitmaps.add(imageLoader.getBitmap(imageUrl));
		}
		
		
		
//		imgFilesOnDisks = null;
//
//    	if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {
//			imgFilesOnDisks = cacheDir.listFiles(new FileFilter() {
//				@Override
//				public boolean accept(File pathname) {
//					if (!pathname.isDirectory()) {
//						String name = pathname.getName();
//						if (name.endsWith(".png")) {
//							return true;
//						}
//					}
//					return false;
//				}
//			});
//    	}
//
//		if (imgFilesOnDisks == null) {
//			imgFilesOnDisks = new File[]{};
//		}
		//TODO refactor to get images

//		int numFiles = imgFilesOnDisks.length;
//		for (int i = 0; i < numFiles; i++) {
//			Bitmap bitmap;
//			try {
//				bitmap = BitmapFactory.decodeFile(imgFilesOnDisks[i].getAbsolutePath(), sOptions);
//			} catch (OutOfMemoryError e) {
//				AssetImage.ImageRecycler.recycleAll();
//				bitmap = BitmapFactory.decodeFile(imgFilesOnDisks[i].getAbsolutePath(), sOptions);
//			}
//
//			if (bitmap != null) {
//				Bitmap scaledBitmap;
//
//				try {
//					scaledBitmap = Bitmap.createScaledBitmap(bitmap,
//							(int) ((float) bitmap.getWidth() / 3.4),
//							(int) ((float) bitmap.getHeight() / 3.4), true);
//				} catch (OutOfMemoryError e) {
//					AssetImage.ImageRecycler.recycleAll();
//					scaledBitmap = Bitmap.createScaledBitmap(bitmap,
//							(int) ((float) bitmap.getWidth() / 3.4),
//							(int) ((float) bitmap.getHeight() / 3.4), true);
//				}
//
//				bitmap.recycle();
//				mBitmaps.add(scaledBitmap);
//				String bitmapFileName = imgFilesOnDisks[i].getName();
//				mNames.add(bitmapFileName.substring(0,
//						bitmapFileName.length() - 4)); // To remove the .png
//			}
//		}
	}

	public class ImageAdapter extends BaseAdapter {
		private int mWidth;
		private int mHeight;

		public ImageAdapter(Context c, int width, int height) {
			mContext = c;
			mWidth = width;
			mHeight = height;
		}

		@Override
		public int getCount() {
			return mBitmaps.size();
		}

		@Override
		public Object getItem(int position) {
			return position;
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ImageView imageView;
			if (convertView == null) {
				imageView = new ImageView(mContext);
				imageView.setLayoutParams(new GridView.LayoutParams(mWidth / 3, mWidth / 3));
				imageView.setAdjustViewBounds(false);
				imageView.setScaleType(ImageView.ScaleType.CENTER);
				imageView.setPadding(8, 8, 8, 8);
			} else {
				imageView = (ImageView) convertView;
			}
			Bitmap bitmap = mBitmaps.get(position);
			imageView.setImageBitmap(bitmap);

			return imageView;
		}
		private Context mContext;
	}
}
